using System;
using System.IO;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using OfficeOpenXml;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            try
            {
                var options = new ChromeOptions();
                options.AddArguments("--no-sandbox");
                options.AddArguments("--disable-dev-shm-usage");
                options.AddArguments("--remote-debugging-port=9222");
                options.AddArguments("--disable-gpu");
                options.AddArguments("--window-size=1920,1080");

                var driver = new ChromeDriver(options);
                string link = "https://ec.europa.eu/tools/eudamed/#/screen/search-device?deviceStatusCode=refdata.device-model-status.on-the-market&submitted=true";
                driver.Navigate().GoToUrl(link);
                driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(40);

                ClickCloseButton(driver);

                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "ScrapedDataTable.xlsx");

                using (var package = new ExcelPackage())
                {
                    var sheet = package.Workbook.Worksheets.Add("ScrapedData");
                    int rowIndex = 1;

                    SetItemsPerPage(driver);
                    const int totalPages = 11663;

                    for (int currentPage = 1; currentPage <= totalPages; currentPage++)
                    {
                        Console.WriteLine($"Scraping page {currentPage}...");
                        bool success = false;

                        while (!success)
                        {
                            try
                            {
                                rowIndex = Scrape(driver, sheet, rowIndex);
                                success = true;
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"Scraping error on page {currentPage}: {ex.Message}");
                                Console.WriteLine("Choose an option: [R]etry, [S]kip to next page, [E]xit:");
                                string input = Console.ReadLine().ToUpper();

                                if (input == "R")
                                {
                                    Console.WriteLine("Retrying...");
                                }
                                else if (input == "S")
                                {
                                    Console.WriteLine("Skipping to next page...");
                                    success = true; // Move to next iteration
                                }
                                else if (input == "E")
                                {
                                    Console.WriteLine("Exiting...");
                                    driver.Quit();
                                    Environment.Exit(0);
                                }
                            }
                        }

                        try
                        {
                            package.SaveAs(new FileInfo(filePath));
                            Console.WriteLine($"Data successfully saved after page {currentPage}.");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error saving file: {ex.Message}");
                        }

                        if (currentPage < totalPages)
                        {
                            NavigateToNextPage(driver, currentPage);
                        }
                    }

                    if (sheet.Dimension != null)
                    {
                        package.SaveAs(new FileInfo(filePath));
                        Console.WriteLine($"Excel file successfully saved at: {filePath}");
                    }
                    else
                    {
                        Console.WriteLine("No data scraped. Excel file not created.");
                    }
                }

                driver.Quit();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Critical Error: {ex.Message}");
                Console.WriteLine("Choose an option: [R]etry, [E]xit:");
                string input = Console.ReadLine().ToUpper();

                if (input == "R")
                {
                    Main(args);
                }
                else
                {
                    Console.WriteLine("Exiting...");
                    Environment.Exit(0);
                }
            }
        }

        public static void ClickCloseButton(ChromeDriver driver)
        {
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            try
            {
                var closeButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//i[contains(@class, 'btn-close') and @title='Click to remove criteria']")));
                IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                js.ExecuteScript("arguments[0].scrollIntoView(true);", closeButton);
                System.Threading.Thread.Sleep(500);
                closeButton.Click();

                Console.WriteLine("Close button clicked successfully.");
            }
            catch (NoSuchElementException)
            {
                Console.WriteLine("Close button not found. Continuing...");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error clicking close button: {ex.Message}");
            }
        }

        public static void SetItemsPerPage(ChromeDriver driver)
        {
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(40));

            try
            {
                IWebElement dropdownTrigger = wait.Until(ExpectedConditions.ElementToBeClickable(By.ClassName("p-dropdown")));
                js.ExecuteScript("arguments[0].scrollIntoView(true);", dropdownTrigger);
                dropdownTrigger.Click();

                IWebElement dropdownOption = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector("[aria-label='50']")));
                js.ExecuteScript("arguments[0].scrollIntoView(true);", dropdownOption);
                dropdownOption.Click();

                wait.Until(d =>
                {
                    var table = d.FindElement(By.TagName("p-table"));
                    var rows = table.FindElements(By.CssSelector("tbody > tr"));
                    return rows.Count == 50;
                });

                Console.WriteLine("Page set to 50 items per page.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error setting items per page: {ex.Message}");
            }
        }

        public static void NavigateToNextPage(ChromeDriver driver, int currentPage)
        {
            try
            {
                var nextPageButtonXPath = $"//button[@aria-label='Page number {currentPage + 1} ']";
                WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));

                var nextPageButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath(nextPageButtonXPath)));
                ((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].scrollIntoView(true);", nextPageButton);
                nextPageButton.Click();

                Console.WriteLine($"Navigated to page {currentPage + 1}.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error navigating to page {currentPage + 1}: {ex.Message}");
            }
        }

        public static int Scrape(ChromeDriver driver, ExcelWorksheet sheet, int rowIndex)
        {
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));

            try
            {
                IWebElement table = wait.Until(d =>
                {
                    try
                    {
                        var element = d.FindElement(By.TagName("p-table"));
                        return element.Displayed ? element : null;
                    }
                    catch (NoSuchElementException)
                    {
                        return null;
                    }
                });

                var rows = table.FindElements(By.CssSelector("tbody > tr"));

                foreach (var row in rows)
                {
                    var cells = row.FindElements(By.CssSelector("td"));
                    for (int colIndex = 0; colIndex < cells.Count; colIndex++)
                    {
                        sheet.Cells[rowIndex, colIndex + 1].Value = cells[colIndex].Text;
                    }
                    rowIndex++;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Scraping error: {ex.Message}");
                throw;
            }

            return rowIndex;
        }
    }
}
